-- CREATE TABLE account(
--  user_id SERIAL PRIMARY KEY,
-- 	username VARCHAR(50) UNIQUE NOT NULL,
-- 	password VARCHAR(50) NOT NULL,
-- 	email VARCHAR(250) UNIQUE NOT NULL,
-- 	created_on TIMESTAMP NOT NULL,
-- 	last_login TIMESTAMP 
-- );

-- CREATE TABLE JOB(
-- job_id SERIAL PRIMARY KEY,
-- 	job_name VARCHAR(200) UNIQUE NOT NULL
-- );

-- CREATE TABLE account_job(
-- user_id INTEGER REFERENCES account(user_id),
-- 	job_id INTEGER REFERENCES job(job_id),
-- 	hire_date TIMESTAMP
-- );

-- INSERT INTO account(username, password, email,created_on)
-- VALUES
-- ('Jose','password', 'jose@mail.com', CURRENT_TIMESTAMP);

-- INSERT INTO job(job_name)
-- VALUES
-- ('Astronaut');

-- INSERT INTO job(job_name)
-- VALUES
-- ('President');

-- INSERT INTO account_job(user_id, job_id, hire_date)
-- VALUES
-- (10,10, CURRENT_TIMESTAMP);

-- UPDATE account
-- SET last_login = CURRENT_TIMESTAMP;

-- UPDATE account
-- SET last_login = created_on;

-- UPDATE account_job
-- SET hire_date = account.created_on
-- FROM account
-- WHERE account_job.user_id = account.user_id;

-- UPDATE account
-- SET last_login = CURRENT_TIMESTAMP
-- RETURNING email, created_on,last_login;

-- INSERT INTO job(job_name)
-- VALUES
-- ('Cowboy')

-- SELECT * FROM job

-- DELETE FROM job 
-- WHERE job_name = 'Cowboy'
-- RETURNING job_id, job_name

-- CREATE TABLE information(
-- 	info_id SERIAL PRIMARY KEY,
-- 		title VARCHAR(500) NOT NULL,
-- 		person VARCHAR(50) NOT NULL UNIQUE
--)

-- ALTER TABLE information
-- RENAME TO new_info

-- ALTER TABLE new_info
-- RENAME COLUMN person TO people

-- INSERT INTO new_info(title)
-- VALUES
-- ('som new title')

-- ALTER TABLE new_info
-- ALTER COLUMN people DROP NOT NULL

-- INSERT INTO new_info(title)
-- VALUES
-- ('some new title');

-- CREATE TABLE employees(
-- 	emp_id SERIAL PRIMARY KEY,
-- 	first_name VARCHAR(50) NOT NULL,
-- 	last_name VARCHAR(50) NOT NULL,
-- 	birthdate DATE CHECK(birthdate > '1900-01-01'),
-- 	hire_date DATE CHECK(hire_date > birthdate),
-- 	salary INTEGER CHECK(salary > 0)
-- );

-- INSERT INTO employees(
-- 	first_name,
-- 		last_name,
-- 	birthdate,
-- 	hire_date,
-- 	salary
-- )
-- VALUES
-- ('Sammy',
-- 'smith',
-- '1990-11-03',
-- '2010-01-01',
-- 100);

-- SELECT * FROM employees

-- SELECT customer_id,
-- CASE 
-- 	WHEN(customer_id <= 100) THEN 'Premium'
-- 	WHEN(customer_id BETWEEN 100 AND 200) THEN 'Plus'
-- 	ELSE 'Normal'
-- END AS rank
-- FROM customer;

-- SELECT customer_id,
-- CASE customer_id
-- 	WHEN 2 THEN 'Winner'
-- 	WHEN 5 THEN 'Second place'
-- 	ELSE 'Normal'
-- END
-- FROM customer;

-- SELECT
-- SUM(CASE rental_rate 
-- 	WHEN 0.99 THEN 1
-- 	ELSE 0
-- END) AS number_of_bargains,
-- SUM(CASE rental_rate
--    WHEN 2.99 THEN 1
--    ELSE 0
-- END) AS regular,
-- SUM(CASE rental_rate
--    WHEN 4.99 THEN 1
--    ELSE 0
--    END) AS premium
-- FROM film

SELECT
SUM(
CASE rating
	WHEN 'R' THEN 1 ELSE 0
END) AS r
FROM film
------------------------------------------------------
24.03.07
DB

create table

CREATE TABLE account(
 user_id SERIAL PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP 
)

create table

CREATE TABLE JOB(
 job_id SERIAL PRIMARY KEY,
 	job_name VARCHAR(200) UNIQUE NOT NULL
);

create table

CREATE TABLE account_job(
user_id INTEGER REFERENCES account(user_id),
	job_id INTEGER REFERENCES job(job_id),
	hire_date TIMESTAMP
)
sum 함수는 case, when, then, else, 와 같이 사용

SUM(CASE rental_rate
   WHEN 2.99 THEN 1
   ELSE 0
   END) AS regular


“School”이라는 새 데이터베이스를 생성합니다. 이 데이터베이스에는 두 테이블, teachers (교사)와 students (학생)가 있어야 합니다.
students 테이블에는 student_id, first_name (이름), last_name (성), homeroom_number (교실 번호), phone (전화번호), email (이메일), graduation year (졸업 연도) 열이 있어야 합니다.
teachers 테이블에는 teacher_id, first_name (이름), last_name (성), homeroom_number (교실 번호), department (부서), email (이메일), phone (전화번호) 열이 있습니다.
제약 조건은 대부분 여러분 마음대로 하면 되지만, 테이블 제약 조건으로는 다음을 고려해야 합니다:
1. 비상시 학생에게 연락할 수 있는 전화번호가 있어야 합니다.
2. 테이블의 기본키로 id가 있어야 합니다.
3. 전화번호와 이메일은 개인별로 모두 달라야 합니다.
표를 만들었으면, 전화번호가 777-555-1234이고 이메일이 없는 Mark Watney (student_id=1)라는 학생을 삽입하세요. 그는 2035년에 졸업하고 교실 번호는 5번입니다.
그다음 생물학 부서에 있고 교실 번호가 5인 Jonas Salk (teacher_id = 1)라는 교사를 삽입합니다. 연락처 정보는 jsalk@school.org이고 전화번호는 777-555-4321입니다.

-- CREATE TABLE teachers(
-- teaher_id SERIAL PRIMARY KEY,
-- 	first_name VARCHAR(50) UNIQUE NOT NULL,
-- 	last_name VARCHAR(50) UNIQUE NOT NULL,
-- 	homeroom_number VARCHAR(100) NOT NULL,
-- 	department VARCHAR(100) NOT NULL,
-- 	email VARCHAR(200) UNIQUE NOT NULL,
-- 	phone VARCHAR(100) UNIQUE NOT NULL
-- );

-- CREATE TABLE students(
-- st_id SERIAL PRIMARY KEY,
-- 	studnet_id VARCHAR(50) UNIQUE NOT NULL,
-- 	first_name VARCHAR(50) UNIQUE NOT NULL,
-- 	last_name VARCHAR(50) UNIQUE NOT NULL,
-- 	homeroom_number VARCHAR(100) NOT NULL,
-- 	phone VARCHAR(100) UNIQUE NOT NULL,
-- 	email VARCHAR(200) UNIQUE NOT NULL,
-- 	graduation_year VARCHAR(50) NOT NULL
-- )

-- INSERT INTO students
-- (phone, email, first_name, last_name, studnet_id, graduation_year, homeroom_number)
-- VALUES
-- ('777-555-1234',
-- 'email',
-- 'Mark',
-- 'Watney',
-- 'student_id =1',
-- '2035',
-- '5');

-- SELECT * FROM students;

-- INSERT INTO teachers
-- (department, homeroom_number, first_name, last_name, teacher_id,
-- email,phone)
-- VALUES
-- ('biology',
-- '5',
-- 'Jonas',
-- 'Salk',
-- 'teacher_id=1',
-- 'jsalk@school.org',
-- '777-555-4321');



